#############################################################################
# Makefile for building: MyPasswordSafe
# Generated by qmake (1.05a) (Qt 3.1.2) on: Sun May  2 20:03:59 2004
# Project:  MyPasswordSafe.pro
# Template: app
# Command: $(QMAKE) -o Makefile MyPasswordSafe.pro
#############################################################################

####### Compiler, tools and options

CC       = gcc
CXX      = g++
LEX      = flex
YACC     = yacc
CFLAGS   = -pipe -Wall -W -O2  -DQT_NO_DEBUG
CXXFLAGS = -g -DDEBUG -pipe -Wall -W -O2  -DQT_NO_DEBUG
LEXFLAGS = 
YACCFLAGS= -d
INCPATH  = -I$(QTDIR)/mkspecs/linux-g++ -I. -I$(QTDIR)/include -I.ui/ -Isrc -I.moc/
LINK     = g++
LFLAGS   = -g
LIBS     = $(SUBLIBS)  -Wl,-rpath,$(QTDIR)/lib -L$(QTDIR)/lib -L/usr/X11R6/lib -lqt-mt -lXext -lX11 -lm
AR       = ar cqs
RANLIB   = 
MOC      = $(QTDIR)/bin/moc
UIC      = $(QTDIR)/bin/uic
QMAKE    = qmake
TAR      = tar -cf
GZIP     = gzip -9f
COPY     = cp -f
COPY_FILE= $(COPY) -p
COPY_DIR = $(COPY) -pR
DEL_FILE = rm -f
SYMLINK  = ln -sf
DEL_DIR  = rmdir
MOVE     = mv -f
CHK_DIR_EXISTS= test -d
MKDIR    = mkdir -p

####### Output directory

OBJECTS_DIR = .obj/

####### Files

HEADERS = src/safe.hpp \
		src/securedstring.hpp \
		src/encryptedstring.hpp \
		src/serializers.hpp \
		src/pwsafe/BlowFish.h \
		src/pwsafe/Util.h \
		src/pwsafe/sha1.h \
		src/pwsafe/PwsPlatform.h \
		src/myutil.hpp \
		src/exception.hpp \
		src/startupdlg.hpp \
		src/config.h \
		src/smartptr.hpp \
		src/safelistview.hpp
SOURCES = src/main.cpp \
		src/securedstring.cpp \
		src/safe.cpp \
		src/serializers.cpp \
		src/encryptedstring.cpp \
		src/pwsafe/BlowFish.cpp \
		src/pwsafe/Util.cpp \
		src/pwsafe/sha1.cpp \
		src/myutil.cpp \
		src/startupdlg.cpp \
		src/smartptr.cpp \
		src/safelistview.cpp
OBJECTS = .obj/main.o \
		.obj/securedstring.o \
		.obj/safe.o \
		.obj/serializers.o \
		.obj/encryptedstring.o \
		.obj/BlowFish.o \
		.obj/Util.o \
		.obj/sha1.o \
		.obj/myutil.o \
		.obj/startupdlg.o \
		.obj/smartptr.o \
		.obj/safelistview.o \
		.obj/mypasswordsafe.o \
		.obj/pwordeditdlg.o \
		.obj/passphrasedlg.o \
		.obj/preferencesdlg.o \
		.obj/aboutdlg.o \
		.obj/manualdlg.o \
		.obj/startupdlgbase.o \
		.obj/newpassphrasedlg.o \
		.obj/qmake_image_collection.o
FORMS = src/mypasswordsafe.ui \
		src/pwordeditdlg.ui \
		src/passphrasedlg.ui \
		src/preferencesdlg.ui \
		src/aboutdlg.ui \
		src/manualdlg.ui \
		src/startupdlgbase.ui \
		src/newpassphrasedlg.ui
UICDECLS = .ui/mypasswordsafe.h \
		.ui/pwordeditdlg.h \
		.ui/passphrasedlg.h \
		.ui/preferencesdlg.h \
		.ui/aboutdlg.h \
		.ui/manualdlg.h \
		.ui/startupdlgbase.h \
		.ui/newpassphrasedlg.h
UICIMPLS = .ui/mypasswordsafe.cpp \
		.ui/pwordeditdlg.cpp \
		.ui/passphrasedlg.cpp \
		.ui/preferencesdlg.cpp \
		.ui/aboutdlg.cpp \
		.ui/manualdlg.cpp \
		.ui/startupdlgbase.cpp \
		.ui/newpassphrasedlg.cpp
SRCMOC   = .moc/moc_startupdlg.cpp \
		.moc/moc_safelistview.cpp \
		.moc/moc_mypasswordsafe.cpp \
		.moc/moc_pwordeditdlg.cpp \
		.moc/moc_passphrasedlg.cpp \
		.moc/moc_preferencesdlg.cpp \
		.moc/moc_aboutdlg.cpp \
		.moc/moc_manualdlg.cpp \
		.moc/moc_startupdlgbase.cpp \
		.moc/moc_newpassphrasedlg.cpp
OBJMOC = .obj/moc_startupdlg.o \
		.obj/moc_safelistview.o \
		.obj/moc_mypasswordsafe.o \
		.obj/moc_pwordeditdlg.o \
		.obj/moc_passphrasedlg.o \
		.obj/moc_preferencesdlg.o \
		.obj/moc_aboutdlg.o \
		.obj/moc_manualdlg.o \
		.obj/moc_startupdlgbase.o \
		.obj/moc_newpassphrasedlg.o
DIST	   = MyPasswordSafe.pro
QMAKE_TARGET = MyPasswordSafe
DESTDIR  = 
TARGET   = MyPasswordSafe

first: all
####### Implicit rules

.SUFFIXES: .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(UICDECLS) $(OBJECTS) $(OBJMOC) 
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJMOC) $(LIBS)

mocables: $(SRCMOC)

$(MOC): 
	( cd $(QTDIR)/src/moc ; $(MAKE) )

Makefile: MyPasswordSafe.pro  $(QTDIR)/mkspecs/linux-g++/qmake.conf 
	$(QMAKE) -o Makefile MyPasswordSafe.pro
qmake: 
	@$(QMAKE) -o Makefile MyPasswordSafe.pro

dist: 
	@mkdir -p .obj/MyPasswordSafe && $(COPY_FILE) --parents $(SOURCES) $(HEADERS) $(FORMS) $(DIST) .obj/MyPasswordSafe/ && $(COPY_FILE) --parents locale/mypasswordsafe_en.ts locale/mypasswordsafe_c.ts locale/mypasswordsafe_fr.ts .obj/MyPasswordSafe/ && $(COPY_FILE) --parents src/mypasswordsafe.ui.h src/pwordeditdlg.ui.h src/passphrasedlg.ui.h src/preferencesdlg.ui.h src/aboutdlg.ui.h src/manualdlg.ui.h src/startupdlgbase.ui.h src/newpassphrasedlg.ui.h .obj/MyPasswordSafe/ && ( cd `dirname .obj/MyPasswordSafe` && $(TAR) MyPasswordSafe.tar MyPasswordSafe && $(GZIP) MyPasswordSafe.tar ) && $(MOVE) `dirname .obj/MyPasswordSafe`/MyPasswordSafe.tar.gz . && $(DEL_FILE) -r .obj/MyPasswordSafe

mocclean:
	-$(DEL_FILE) $(OBJMOC)
	-$(DEL_FILE) $(SRCMOC)

uiclean:
	-$(DEL_FILE) $(UICIMPLS) $(UICDECLS)

yaccclean:
lexclean:
clean: mocclean uiclean
	-$(DEL_FILE) $(OBJECTS) 
		-$(DEL_FILE) .ui/qmake_image_collection.cpp
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) $(TARGET)


FORCE:

####### Compile

.obj/main.o: src/main.cpp src/config.h \
		src/safe.hpp \
		.ui/mypasswordsafe.h \
		src/startupdlg.hpp \
		src/securedstring.hpp \
		src/encryptedstring.hpp \
		src/smartptr.hpp \
		src/pwsafe/BlowFish.h \
		src/myutil.hpp \
		.ui/startupdlgbase.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/main.o src/main.cpp

.obj/securedstring.o: src/securedstring.cpp src/securedstring.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/securedstring.o src/securedstring.cpp

.obj/safe.o: src/safe.cpp src/securedstring.hpp \
		src/safe.hpp \
		src/serializers.hpp \
		src/myutil.hpp \
		src/pwsafe/Util.h \
		src/encryptedstring.hpp \
		src/smartptr.hpp \
		src/pwsafe/BlowFish.h \
		src/config.h \
		src/pwsafe/sha1.h \
		src/pwsafe/PwsPlatform.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/safe.o src/safe.cpp

.obj/serializers.o: src/serializers.cpp src/safe.hpp \
		src/securedstring.hpp \
		src/encryptedstring.hpp \
		src/serializers.hpp \
		src/exception.hpp \
		src/myutil.hpp \
		src/smartptr.hpp \
		src/pwsafe/BlowFish.h \
		src/pwsafe/Util.h \
		src/config.h \
		src/pwsafe/sha1.h \
		src/pwsafe/PwsPlatform.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/serializers.o src/serializers.cpp

.obj/encryptedstring.o: src/encryptedstring.cpp src/pwsafe/Util.h \
		src/pwsafe/BlowFish.h \
		src/encryptedstring.hpp \
		src/pwsafe/sha1.h \
		src/pwsafe/PwsPlatform.h \
		src/smartptr.hpp \
		src/securedstring.hpp \
		src/myutil.hpp \
		src/config.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/encryptedstring.o src/encryptedstring.cpp

.obj/BlowFish.o: src/pwsafe/BlowFish.cpp src/pwsafe/BlowFish.h \
		src/pwsafe/Util.h \
		src/pwsafe/sha1.h \
		src/pwsafe/PwsPlatform.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/BlowFish.o src/pwsafe/BlowFish.cpp

.obj/Util.o: src/pwsafe/Util.cpp src/pwsafe/sha1.h \
		src/pwsafe/BlowFish.h \
		src/pwsafe/Util.h \
		src/pwsafe/PwsPlatform.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/Util.o src/pwsafe/Util.cpp

.obj/sha1.o: src/pwsafe/sha1.cpp src/pwsafe/PwsPlatform.h \
		src/pwsafe/sha1.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/sha1.o src/pwsafe/sha1.cpp

.obj/myutil.o: src/myutil.cpp src/myutil.hpp \
		src/config.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/myutil.o src/myutil.cpp

.obj/startupdlg.o: src/startupdlg.cpp src/startupdlg.hpp \
		.ui/mypasswordsafe.h \
		.ui/startupdlgbase.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/startupdlg.o src/startupdlg.cpp

.obj/smartptr.o: src/smartptr.cpp src/smartptr.hpp \
		src/myutil.hpp \
		src/config.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/smartptr.o src/smartptr.cpp

.obj/safelistview.o: src/safelistview.cpp src/myutil.hpp \
		src/safelistview.hpp \
		src/config.h \
		src/safe.hpp \
		src/securedstring.hpp \
		src/encryptedstring.hpp \
		src/smartptr.hpp \
		src/pwsafe/BlowFish.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/safelistview.o src/safelistview.cpp

.ui/mypasswordsafe.h: src/mypasswordsafe.ui src/safe.hpp \
		.ui/manualdlg.h \
		src/securedstring.hpp \
		src/encryptedstring.hpp \
		src/smartptr.hpp \
		src/pwsafe/BlowFish.h \
		src/myutil.hpp \
		src/config.h
	$(UIC) src/mypasswordsafe.ui -o .ui/mypasswordsafe.h

.ui/mypasswordsafe.cpp: .ui/mypasswordsafe.h src/mypasswordsafe.ui src/safe.hpp \
		.ui/manualdlg.h \
		src/securedstring.hpp \
		src/encryptedstring.hpp \
		src/smartptr.hpp \
		src/pwsafe/BlowFish.h \
		src/myutil.hpp \
		src/config.h
	$(UIC) src/mypasswordsafe.ui -i mypasswordsafe.h -o .ui/mypasswordsafe.cpp

.ui/pwordeditdlg.h: src/pwordeditdlg.ui 
	$(UIC) src/pwordeditdlg.ui -o .ui/pwordeditdlg.h

.ui/pwordeditdlg.cpp: .ui/pwordeditdlg.h src/pwordeditdlg.ui 
	$(UIC) src/pwordeditdlg.ui -i pwordeditdlg.h -o .ui/pwordeditdlg.cpp

.ui/passphrasedlg.h: src/passphrasedlg.ui src/securedstring.hpp
	$(UIC) src/passphrasedlg.ui -o .ui/passphrasedlg.h

.ui/passphrasedlg.cpp: .ui/passphrasedlg.h src/passphrasedlg.ui src/securedstring.hpp
	$(UIC) src/passphrasedlg.ui -i passphrasedlg.h -o .ui/passphrasedlg.cpp

.ui/preferencesdlg.h: src/preferencesdlg.ui 
	$(UIC) src/preferencesdlg.ui -o .ui/preferencesdlg.h

.ui/preferencesdlg.cpp: .ui/preferencesdlg.h src/preferencesdlg.ui 
	$(UIC) src/preferencesdlg.ui -i preferencesdlg.h -o .ui/preferencesdlg.cpp

.ui/aboutdlg.h: src/aboutdlg.ui 
	$(UIC) src/aboutdlg.ui -o .ui/aboutdlg.h

.ui/aboutdlg.cpp: .ui/aboutdlg.h src/aboutdlg.ui 
	$(UIC) src/aboutdlg.ui -i aboutdlg.h -o .ui/aboutdlg.cpp

.ui/manualdlg.h: src/manualdlg.ui 
	$(UIC) src/manualdlg.ui -o .ui/manualdlg.h

.ui/manualdlg.cpp: .ui/manualdlg.h src/manualdlg.ui 
	$(UIC) src/manualdlg.ui -i manualdlg.h -o .ui/manualdlg.cpp

.ui/startupdlgbase.h: src/startupdlgbase.ui 
	$(UIC) src/startupdlgbase.ui -o .ui/startupdlgbase.h

.ui/startupdlgbase.cpp: .ui/startupdlgbase.h src/startupdlgbase.ui 
	$(UIC) src/startupdlgbase.ui -i startupdlgbase.h -o .ui/startupdlgbase.cpp

.ui/newpassphrasedlg.h: src/newpassphrasedlg.ui 
	$(UIC) src/newpassphrasedlg.ui -o .ui/newpassphrasedlg.h

.ui/newpassphrasedlg.cpp: .ui/newpassphrasedlg.h src/newpassphrasedlg.ui 
	$(UIC) src/newpassphrasedlg.ui -i newpassphrasedlg.h -o .ui/newpassphrasedlg.cpp

.obj/mypasswordsafe.o: .ui/mypasswordsafe.cpp .ui/aboutdlg.h \
		.ui/preferencesdlg.h \
		src/safelistview.hpp \
		src/mypasswordsafe.ui.h \
		.ui/mypasswordsafe.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/mypasswordsafe.o .ui/mypasswordsafe.cpp

.obj/pwordeditdlg.o: .ui/pwordeditdlg.cpp src/pwordeditdlg.ui.h \
		.ui/pwordeditdlg.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/pwordeditdlg.o .ui/pwordeditdlg.cpp

.obj/passphrasedlg.o: .ui/passphrasedlg.cpp src/passphrasedlg.ui.h \
		.ui/passphrasedlg.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/passphrasedlg.o .ui/passphrasedlg.cpp

.obj/preferencesdlg.o: .ui/preferencesdlg.cpp src/preferencesdlg.ui.h \
		.ui/preferencesdlg.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/preferencesdlg.o .ui/preferencesdlg.cpp

.obj/aboutdlg.o: .ui/aboutdlg.cpp src/aboutdlg.ui.h \
		.ui/aboutdlg.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/aboutdlg.o .ui/aboutdlg.cpp

.obj/manualdlg.o: .ui/manualdlg.cpp src/manualdlg.ui.h \
		.ui/manualdlg.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/manualdlg.o .ui/manualdlg.cpp

.obj/startupdlgbase.o: .ui/startupdlgbase.cpp src/startupdlgbase.ui.h \
		.ui/startupdlgbase.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/startupdlgbase.o .ui/startupdlgbase.cpp

.obj/newpassphrasedlg.o: .ui/newpassphrasedlg.cpp src/newpassphrasedlg.ui.h \
		.ui/newpassphrasedlg.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/newpassphrasedlg.o .ui/newpassphrasedlg.cpp

.obj/moc_startupdlg.o: .moc/moc_startupdlg.cpp src/startupdlg.hpp .ui/startupdlgbase.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/moc_startupdlg.o .moc/moc_startupdlg.cpp

.obj/moc_safelistview.o: .moc/moc_safelistview.cpp src/safelistview.hpp src/safe.hpp \
		src/securedstring.hpp \
		src/encryptedstring.hpp \
		src/smartptr.hpp \
		src/pwsafe/BlowFish.h \
		src/myutil.hpp \
		src/config.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/moc_safelistview.o .moc/moc_safelistview.cpp

.obj/moc_mypasswordsafe.o: .moc/moc_mypasswordsafe.cpp .ui/mypasswordsafe.h 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/moc_mypasswordsafe.o .moc/moc_mypasswordsafe.cpp

.obj/moc_pwordeditdlg.o: .moc/moc_pwordeditdlg.cpp .ui/pwordeditdlg.h 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/moc_pwordeditdlg.o .moc/moc_pwordeditdlg.cpp

.obj/moc_passphrasedlg.o: .moc/moc_passphrasedlg.cpp .ui/passphrasedlg.h 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/moc_passphrasedlg.o .moc/moc_passphrasedlg.cpp

.obj/moc_preferencesdlg.o: .moc/moc_preferencesdlg.cpp .ui/preferencesdlg.h 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/moc_preferencesdlg.o .moc/moc_preferencesdlg.cpp

.obj/moc_aboutdlg.o: .moc/moc_aboutdlg.cpp .ui/aboutdlg.h 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/moc_aboutdlg.o .moc/moc_aboutdlg.cpp

.obj/moc_manualdlg.o: .moc/moc_manualdlg.cpp .ui/manualdlg.h 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/moc_manualdlg.o .moc/moc_manualdlg.cpp

.obj/moc_startupdlgbase.o: .moc/moc_startupdlgbase.cpp .ui/startupdlgbase.h 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/moc_startupdlgbase.o .moc/moc_startupdlgbase.cpp

.obj/moc_newpassphrasedlg.o: .moc/moc_newpassphrasedlg.cpp .ui/newpassphrasedlg.h 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/moc_newpassphrasedlg.o .moc/moc_newpassphrasedlg.cpp

.moc/moc_startupdlg.cpp: $(MOC) src/startupdlg.hpp
	$(MOC) src/startupdlg.hpp -o .moc/moc_startupdlg.cpp

.moc/moc_safelistview.cpp: $(MOC) src/safelistview.hpp
	$(MOC) src/safelistview.hpp -o .moc/moc_safelistview.cpp

.moc/moc_mypasswordsafe.cpp: $(MOC) .ui/mypasswordsafe.h
	$(MOC) .ui/mypasswordsafe.h -o .moc/moc_mypasswordsafe.cpp

.moc/moc_pwordeditdlg.cpp: $(MOC) .ui/pwordeditdlg.h
	$(MOC) .ui/pwordeditdlg.h -o .moc/moc_pwordeditdlg.cpp

.moc/moc_passphrasedlg.cpp: $(MOC) .ui/passphrasedlg.h
	$(MOC) .ui/passphrasedlg.h -o .moc/moc_passphrasedlg.cpp

.moc/moc_preferencesdlg.cpp: $(MOC) .ui/preferencesdlg.h
	$(MOC) .ui/preferencesdlg.h -o .moc/moc_preferencesdlg.cpp

.moc/moc_aboutdlg.cpp: $(MOC) .ui/aboutdlg.h
	$(MOC) .ui/aboutdlg.h -o .moc/moc_aboutdlg.cpp

.moc/moc_manualdlg.cpp: $(MOC) .ui/manualdlg.h
	$(MOC) .ui/manualdlg.h -o .moc/moc_manualdlg.cpp

.moc/moc_startupdlgbase.cpp: $(MOC) .ui/startupdlgbase.h
	$(MOC) .ui/startupdlgbase.h -o .moc/moc_startupdlgbase.cpp

.moc/moc_newpassphrasedlg.cpp: $(MOC) .ui/newpassphrasedlg.h
	$(MOC) .ui/newpassphrasedlg.h -o .moc/moc_newpassphrasedlg.cpp

.obj/qmake_image_collection.o: .ui/qmake_image_collection.cpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o .obj/qmake_image_collection.o .ui/qmake_image_collection.cpp

.ui/qmake_image_collection.cpp: images/searchfind \
		images/edit_add.png \
		images/edit_remove.png \
		images/editcopy_1.png \
		images/about_banner.png \
		images/edit.png \
		images/editcut.png \
		images/encrypted.png \
		images/exit.png \
		images/filenew.png \
		images/filenew2.png \
		images/fileopen.png \
		images/filesave.png \
		images/filesaveas.png \
		images/info.png \
		images/configure.png \
		images/contexthelp.png \
		images/Padlock.xpm \
		images/fetch_user.png \
		images/help.png \
		images/back.png \
		images/forward.png \
		doc/sshots/editdialog.jpg \
		doc/sshots/mainwindow.jpg \
		doc/sshots/prefsdialog.jpg \
		images/password.png \
		images/undo.png \
		images/redo.png \
		images/folder_new.png \
		images/folder_blue.png \
		images/folder_blue_open.png
	$(UIC)  -embed MyPasswordSafe images/searchfind images/edit_add.png images/edit_remove.png images/editcopy_1.png images/about_banner.png images/edit.png images/editcut.png images/encrypted.png images/exit.png images/filenew.png images/filenew2.png images/fileopen.png images/filesave.png images/filesaveas.png images/info.png images/configure.png images/contexthelp.png images/Padlock.xpm images/fetch_user.png images/help.png images/back.png images/forward.png doc/sshots/editdialog.jpg doc/sshots/mainwindow.jpg doc/sshots/prefsdialog.jpg images/password.png images/undo.png images/redo.png images/folder_new.png images/folder_blue.png images/folder_blue_open.png -o .ui/qmake_image_collection.cpp

####### Install

install: all 

uninstall: 

